{"version":3,"sources":["tuning/index.ts","engine/custom-nodes/common.ts","engine/custom-nodes/PulseOscillatorNode.ts","engine/custom-nodes/VCO1Node.ts","engine/custom-nodes/RingOscillatorNode.ts","engine/custom-nodes/VCO2Node.ts","engine/custom-nodes/VolumeNode.ts","engine/custom-nodes/VCOMixerNode.ts","engine/audioContext.js","engine/custom-nodes/MasterTuneNode.ts","engine/custom-nodes/PortamentoNode.ts","engine/custom-nodes/FrequencyModulatorNode.ts","engine/custom-nodes/HighpassNode.ts","engine/custom-nodes/LowpassNode.ts","engine/custom-nodes/ModulationGeneratorNode.ts","tuning/references/equal-temper.ts","engine/custom-nodes/KeyboardNode.ts","engine/custom-nodes/DAREnvelopeNode.ts","engine/custom-nodes/HADSREnvelopeNode.ts","engine/index.ts"],"names":["Key","ParamaterError","Error","PulseOscillatorNode","context","pulseWidth","frequency","parameters","get","undefined","AudioWorkletNode","VCO1Node","selectors","waveShape","state","vco1","scale","pulse","triangle","createOscillator","saw","noise","createConstantSource","createGain","triangleLevel","sawLevel","pulseLevel","noiseLevel","offset","value","type","connect","start","observeStore","shape","gain","VCO1WaveShape","TRIANGLE","SAWTOOTH","SQUARE","NOISE","pw","octave","Math","pow","GainNode","RingOscillatorNode","numberOfInputs","VCO2Node","vco2","pitch","ring","square","squareLevel","ringLevel","VCO2WaveShape","PULSE","RING","VolumeNode","volume","VCOMixerNode","vco1Level","vcoMixer","vco2Level","vco1in","vco2in","window","AudioContext","webkitAudioContext","MasterTuneNode","masterTune","tune","PortamentoNode","portamento","time","slope","FrequencyModulatorNode","modulationGenerator","frequencyModulator","envelopeGenerator","egOffset","mgOffset","multiplier","level","HighpassNode","cutoff","highpass","peak","modulator","frequencyIn","max","Q","BiquadFilterNode","LowpassNode","lowpass","ModulationGeneratorNode","waveForm","numberOfOutputs","Array","map","_","i","TwelveTone","fundamental","reference","key","A","baseOctave","this","ratio","note","floor","KeyboardNode","trigger","bassNote","equalTemper","keyboard","keys","target","indexOf","targetFreq","getNote","DAREnvelopeNode","delay","envelopeGenerator1","attack","release","HADSREnvelopeNode","hold","envelopeGenerator2","decay","sustain","init","a","resume","audioWorklet","addModule","vca","destination"],"mappings":"wHAIYA,E,gFCECC,EAAb,kDACE,aAAe,uCACP,4CAFV,sBAAoCC,QCJfC,E,kDAInB,WAAYC,GAAwB,IAAD,uBACjC,cAAMA,EAAS,oBAJjBC,gBAGmC,IAFnCC,eAEmC,EAGjC,IAAMD,EAAa,EAAKE,WAAWC,IAAI,cACjCF,EAAY,EAAKC,WAAWC,IAAI,aAEtC,QAAmBC,IAAfJ,QAA0CI,IAAdH,EAC9B,MAAM,IAAIL,EAPqB,OAUjC,EAAKI,WAAaA,EAClB,EAAKC,UAAYA,EAXgB,E,sBAJYI,mBCG5BC,E,kDAInB,WACEP,GAUC,IAAD,EATAQ,EASA,uDALK,CACHC,UAAW,SAAAC,GAAK,OAAIA,EAAMC,KAAKF,WAC/BR,WAAY,SAAAS,GAAK,OAAIA,EAAMC,KAAKV,YAChCW,MAAO,SAAAF,GAAK,OAAIA,EAAMC,KAAKC,QAE7B,qBACA,cAAMZ,IAfRE,eAcE,IAbFW,WAaE,EAGA,IAAMC,EAAWd,EAAQe,mBACnBC,EAAMhB,EAAQe,mBACdF,EAAQ,IAAId,EAAoBC,GAChCiB,EAAQ,IAAIX,iBAAiBN,EAAS,yBACtCE,EAAYF,EAAQkB,uBACpBN,EAAQZ,EAAQmB,aAEhBC,EAAgBpB,EAAQmB,aACxBE,EAAWrB,EAAQmB,aACnBG,EAAatB,EAAQmB,aACrBI,EAAavB,EAAQmB,aAb3B,OAeA,EAAKjB,UAAYA,EAAUsB,OAC3B,EAAKX,MAAQA,EAEbX,EAAUsB,OAAOC,MAAQ,EACzBX,EAASY,KAAO,WAChBZ,EAASZ,UAAUuB,MAAQ,EAC3BT,EAAIU,KAAO,WACXV,EAAId,UAAUuB,MAAQ,EAEtBvB,EAAUyB,QAAQf,GAElBA,EAAMe,QAAQb,EAASZ,WACvBU,EAAMe,QAAQX,EAAId,WAClBU,EAAMe,QAAQd,EAAMX,WAEpBY,EAASa,QAAQP,GAAeO,QAAhC,gBACAX,EAAIW,QAAQN,GAAUM,QAAtB,gBACAd,EAAMc,QAAQL,GAAYK,QAA1B,gBACAV,EAAMU,QAAQJ,GAAYI,QAA1B,gBAEAb,EAASc,QACTZ,EAAIY,QACJ1B,EAAU0B,QAEVC,YAAarB,EAAUC,WAAW,SAAAqB,GAChCV,EAAcW,KAAKN,MAAQK,IAAUE,IAAcC,SAAW,EAAI,EAClEZ,EAASU,KAAKN,MAAQK,IAAUE,IAAcE,SAAW,EAAI,EAC7DZ,EAAWS,KAAKN,MAAQK,IAAUE,IAAcG,OAAS,EAAI,EAC7DZ,EAAWQ,KAAKN,MAAQK,IAAUE,IAAcI,MAAQ,EAAI,KAG9DP,YAAarB,EAAUP,YAAY,SAAAoC,GACjCxB,EAAMZ,WAAWwB,MAAQY,KAG3BR,YAAarB,EAAUI,OAAO,SAAA0B,GAC5B1B,EAAMmB,KAAKN,MAAQc,KAAKC,IAAI,EAAGF,MAnDjC,E,sBAfkCG,WCLjBC,E,kDACnB,WAAY1C,GAAwB,uCAC5BA,EAAS,gBAAiB,CAAE2C,eAAgB,I,sBAFNrC,mBCM3BsC,E,kDAInB,WACE5C,GAUC,IAAD,EATAQ,EASA,uDALK,CACHC,UAAW,SAAAC,GAAK,OAAIA,EAAMmC,KAAKpC,WAC/BqC,MAAO,SAAApC,GAAK,OAAIA,EAAMmC,KAAKC,OAC3BlC,MAAO,SAAAF,GAAK,OAAIA,EAAMmC,KAAKjC,QAE7B,qBACA,cAAMZ,IAfRE,eAcE,IAbF6C,UAaE,EAGA,IAAM/B,EAAMhB,EAAQe,mBACdiC,EAAS,IAAIjD,EAAoBC,GACjCa,EAAQ,IAAId,EAAoBC,GAChC+C,EAAO,IAAIL,EAAmB1C,GAC9BE,EAAYF,EAAQkB,uBACpB4B,EAAQ9C,EAAQmB,aAChBP,EAAQZ,EAAQmB,aAEhBE,EAAWrB,EAAQmB,aACnB8B,EAAcjD,EAAQmB,aACtBG,EAAatB,EAAQmB,aACrB+B,EAAYlD,EAAQmB,aAd1B,OAgBA,EAAKjB,UAAYA,EAAUsB,OAC3B,EAAKuB,KAAOA,EAEZ7C,EAAUsB,OAAOC,MAAQ,EACzBT,EAAIU,KAAO,WACXV,EAAId,UAAUuB,MAAQ,EACtBuB,EAAO/C,WAAWwB,MAAQ,GAC1BuB,EAAO9C,UAAUuB,MAAQ,EACzBZ,EAAMZ,WAAWwB,MAAQ,IACzBZ,EAAMX,UAAUuB,MAAQ,EAExBvB,EAAUyB,QAAQmB,GAAOnB,QAAQf,GAEjCA,EAAMe,QAAQX,EAAId,WAClBU,EAAMe,QAAQqB,EAAO9C,WACrBU,EAAMe,QAAQd,EAAMX,WAEpB8C,EAAOrB,QAAQoB,EAAM,EAAG,GAExB/B,EAAIW,QAAQN,GAAUM,QAAtB,gBACAqB,EAAOrB,QAAQsB,GAAatB,QAA5B,gBACAd,EAAMc,QAAQL,GAAYK,QAA1B,gBACAoB,EAAKpB,QAAQuB,GAAWvB,QAAxB,gBAEAX,EAAIY,QACJ1B,EAAU0B,QAEVC,YAAarB,EAAUC,WAAW,SAAAqB,GAChCT,EAASU,KAAKN,MAAQK,IAAUqB,IAAcjB,SAAW,EAAI,EAC7De,EAAYlB,KAAKN,MAAQK,IAAUqB,IAAchB,OAAS,EAAI,EAC9Db,EAAWS,KAAKN,MAAQK,IAAUqB,IAAcC,MAAQ,EAAI,EAC5DF,EAAUnB,KAAKN,MAAQK,IAAUqB,IAAcE,KAAO,EAAI,KAE5DxB,YAAarB,EAAUsC,OAAO,SAAArB,GAC5BqB,EAAMf,KAAKN,MAAQc,KAAKC,IAAI,EAAGf,MAEjCI,YAAarB,EAAUI,OAAO,SAAA0B,GAC5B1B,EAAMmB,KAAKN,MAAQc,KAAKC,IAAI,EAAGF,MArDjC,E,sBAfkCG,WCHjBa,E,kDACnB,WACEtD,GAIC,IAAD,EAHAQ,EAGA,uDAH2C,CACzC+C,OAAQ,SAAA7C,GAAK,OAAIA,EAAM6C,SAEzB,2BACA,cAAMvD,GAEN6B,YAAarB,EAAU+C,QAAQ,SAAAA,GAC7B,EAAKxB,KAAKN,MAAQ8B,KAJpB,E,sBANoCd,WCAnBe,E,kDAInB,WACExD,GAKC,IAAD,EAJAQ,EAIA,uDAJiE,CAC/DiD,UAAW,SAAA/C,GAAK,OAAIA,EAAMgD,SAASD,WACnCE,UAAW,SAAAjD,GAAK,OAAIA,EAAMgD,SAASC,YAErC,4BACA,cAAM3D,IAVR4D,YASE,IARFC,YAQE,EAEA,EAAKD,OAAS,IAAIN,EAAWtD,EAAS,CAAEuD,OAAQ/C,EAAUiD,YAC1D,EAAKI,OAAS,IAAIP,EAAWtD,EAAS,CAAEuD,OAAQ/C,EAAUmD,YAE1D,EAAKC,OAAOjC,QAAZ,gBACA,EAAKkC,OAAOlC,QAAZ,gBANA,E,sBAVsCc,WCH3BqB,SAAOC,cAAgBD,OAAOE,mBCMxBC,E,kDACnB,WACEjE,GAIC,IAAD,EAHAQ,EAGA,uDAH+C,CAC7C0D,WAAY,SAAAxD,GAAK,OAAIA,EAAMwD,aAE7B,2BACA,cAAMlE,GAEN6B,YAAarB,EAAU0D,YAAY,SAAAC,GACjC,EAAKpC,KAAKN,MAAQc,KAAKC,IAAI,EAAG2B,MAJhC,E,sBANwC1B,WCCvB2B,E,kDAGnB,WACEpE,GAIC,IAAD,EAHAQ,EAGA,uDAH+C,CAC7C6D,WAAY,SAAA3D,GAAK,OAAIA,EAAM2D,aAE7B,qBACA,cAAMrE,EAAS,yBARjBsE,UAOE,EAGA,IAAMA,EAAO,EAAKnE,WAAWC,IAAI,QAEjC,QAAaC,IAATiE,EACF,MAAM,IAAIzE,EANZ,OASA,EAAKyE,KAAOA,EAEZzC,YAAarB,EAAU6D,YAAY,SAAAA,GACjCA,GAAc,GACdA,GAAc,GAEd,EAAKC,KAAK7C,MAAQ,GAAKc,KAAKC,IAAI+B,KAAW,EAAIF,GAAc,GAD/C,OAdhB,E,sBARwC/D,mBCJvBkE,E,kDAInB,WACExE,GASC,IAAD,EARAQ,EAQA,uDALK,CACHiE,oBAAqB,SAAA/D,GAAK,OACxBA,EAAMgE,mBAAmBD,qBAC3BE,kBAAmB,SAAAjE,GAAK,OAAIA,EAAMgE,mBAAmBC,oBAEvD,qBACA,cAAM3E,IAdRyE,yBAaE,IAZFE,uBAYE,EAEA,EAAK5C,KAAKN,MAAQ,EAIlB,EAAKkD,kBAAoB3E,EAAQmB,aAEjC,EAAKsD,oBAAsBzE,EAAQmB,aAGnC,IAAMyD,EAAW5E,EAAQkB,uBACnB2D,EAAW7E,EAAQkB,uBACzB2D,EAASrD,OAAOC,MAAQ,EACxBmD,EAAShD,QACTiD,EAASjD,QAIT,IAAMkD,EAAa9E,EAAQmB,aAnB3B,OAoBA2D,EAAW/C,KAAKN,MAAQ,EAExB,EAAKgD,oBAAoB9C,QAAQmD,GACjCD,EAASlD,QAAQmD,GAEjB,EAAKH,kBAAkBhD,QAAQmD,EAAW/C,MAC1C6C,EAASjD,QAAQmD,EAAW/C,MAE5B+C,EAAWnD,QAAQ,EAAKI,MAExBF,YAAarB,EAAUiE,qBAAqB,SAAAM,GAC1C,EAAKN,oBAAoB1C,KAAKN,MAAQsD,KAGxClD,YAAarB,EAAUmE,mBAAmB,SAAAI,GACxC,EAAKJ,kBAAkB5C,KAAKN,MAAQsD,EACpCH,EAASpD,OAAOC,MAAQ,EAAIsD,KApC9B,E,sBAdgDtC,WCC/BuC,E,kDAGnB,WACEhF,GAaC,IAAD,EAZAQ,EAYA,uDAPK,CACHyE,OAAQ,SAAAvE,GAAK,OAAIA,EAAMwE,SAASD,QAChCE,KAAM,SAAAzE,GAAK,OAAIA,EAAMwE,SAASC,MAC9BV,oBAAqB,SAAA/D,GAAK,OACxBA,EAAMwE,SAASE,UAAUX,qBAC3BE,kBAAmB,SAAAjE,GAAK,OAAIA,EAAMwE,SAASE,UAAUT,oBAEvD,qBACA,cAAM3E,IAjBRiF,YAgBE,EAGA,EAAKvD,KAAO,WACZ,EAAKxB,UAAUuB,MAAQ,EAEvB,EAAKwD,OAAS,IAAIT,EAAuBxE,EAAS,CAChDyE,oBAAqBjE,EAAUiE,oBAC/BE,kBAAmBnE,EAAUmE,oBAG/B,IAAMU,EAAcrF,EAAQkB,uBAX5B,OAYAmE,EAAYzD,QAEZyD,EAAY1D,QAAQ,EAAKsD,QAAQtD,QAAQ,EAAKzB,WAE9C2B,YAAarB,EAAUyE,QAAQ,SAAAA,GAC7B,IAAMF,EAAQ,GAAK,EAAIE,IAAW,EAAIA,GAKtCI,EAAY7D,OAAOC,MAAQc,KAAKC,IAAI8C,MAAeP,GAJvC,IAIsD,KAGpElD,YAAarB,EAAU2E,MAAM,SAAAA,GAI3B,EAAKI,EAAE9D,MAAQc,KAAKC,IAAI8C,GAAeH,GAH3B,EAGyC,KA7BvD,E,sBAjBsCK,mBCArBC,E,kDAGnB,WACEzF,GAYC,IAAD,EAXAQ,EAWA,uDANK,CACHyE,OAAQ,SAAAvE,GAAK,OAAIA,EAAMgF,QAAQT,QAC/BE,KAAM,SAAAzE,GAAK,OAAIA,EAAMgF,QAAQP,MAC7BV,oBAAqB,SAAA/D,GAAK,OAAIA,EAAMgF,QAAQN,UAAUX,qBACtDE,kBAAmB,SAAAjE,GAAK,OAAIA,EAAMgF,QAAQN,UAAUT,oBAEtD,qBACA,cAAM3E,IAhBRiF,YAeE,EAGA,EAAKvD,KAAO,UACZ,EAAKxB,UAAUuB,MAAQ,EAEvB,EAAKwD,OAAS,IAAIT,EAAuBxE,EAAS,CAChDyE,oBAAqBjE,EAAUiE,oBAC/BE,kBAAmBnE,EAAUmE,oBAG/B,IAAMU,EAAcrF,EAAQkB,uBAX5B,OAYAmE,EAAYzD,QACZyD,EAAY1D,QAAQ,EAAKsD,QAAQtD,QAAQ,EAAKzB,WAE9C2B,YAAarB,EAAUyE,QAAQ,SAAAA,GAC7B,IAAMF,EAAQ,GAAK,EAAIE,IAAW,EAAIA,GAKtCI,EAAY7D,OAAOC,MAAQc,KAAKC,IAAI8C,MAAeP,GAJvC,IAIsD,KAGpElD,YAAarB,EAAU2E,MAAM,SAAAA,GAI3B,EAAKI,EAAE9D,MAAQc,KAAKC,IAAI8C,GAAeH,GAH3B,EAGyC,KA5BvD,E,sBAhBqCK,mBCDpBG,E,kDAInB,WACE3F,GAKC,IAAD,EAJAQ,EAIA,uDAJgE,CAC9DoF,SAAU,SAAAlF,GAAK,OAAIA,EAAM+D,oBAAoBmB,UAC7C1F,UAAW,SAAAQ,GAAK,OAAIA,EAAM+D,oBAAoBvE,YAEhD,qBACA,cAAMF,EAAS,iCAAkC,CAAE6F,gBAAiB,KAVtED,cASE,IARF1F,eAQE,EAGA,IAAM0F,EAAW,EAAKzF,WAAWC,IAAI,YAC/BF,EAAY,EAAKC,WAAWC,IAAI,aAEtC,QAAiBC,IAAbuF,QAAwCvF,IAAdH,EAC5B,MAAM,IAAIL,EAPZ,OAUA,EAAK+F,SAAWA,EAChB,EAAK1F,UAAYA,EAEjB2B,YAAarB,EAAUoF,UAAU,SAAAA,GAC/B,EAAKA,SAASnE,MAAQmE,KAGxB/D,YAAarB,EAAUN,WAAW,SAAAA,GAChC,EAAKA,UAAUuB,MAAQvB,KAlBzB,E,sBAViDI,mB,eCHtC,cAAIwF,MAAM,KAAKC,KAAI,SAACC,EAAGC,GAAJ,OAAU1D,KAAKC,IAAI,EAAGyD,EAAI,Q,SfIhDrG,O,UAAAA,I,sBAAAA,I,oBAAAA,I,UAAAA,I,SAAAA,I,qBAAAA,I,mBAAAA,I,SAAAA,I,qBAAAA,I,mBAAAA,I,SAAAA,I,SAAAA,I,qBAAAA,I,mBAAAA,I,SAAAA,I,qBAAAA,I,oBAAAA,M,KAoBL,IAAMsG,EAAb,WAIE,WAAYC,EAAqBC,GAAmC,IAAdC,EAAa,uDAAPzG,EAAI0G,EAAG,yBAH3DC,gBAG2D,OAF3DF,SAE2D,EACjEG,KAAKH,IAAMA,EACXG,KAAKD,WAAaH,EAAUL,KAAI,SAAAU,GAAK,OAAIA,EAAQN,KANrD,oDASUO,GAEN,IAAML,IADNK,GAAQF,KAAKH,KACQ,GAAM,IAAM,GAC3B/D,EAASC,KAAKoE,MAAMD,EAAO,IACjC,OAAOF,KAAKD,WAAWF,GAAO9D,KAAKC,IAAI,EAAGF,EAAS,OAbvD,KgBpBqBsE,EAQnB,WAAY5G,GAAwB,IAAD,gCANnCE,eAMmC,OAJnC2G,aAImC,OAFnCC,cAEmC,EACjCN,KAAKtG,UAAYF,EAAQkB,uBACzBsF,KAAKK,QAAU7G,EAAQkB,uBACvBsF,KAAKM,SAAW,EAEhBN,KAAKtG,UAAU0B,QACf4E,KAAKK,QAAQjF,QAIb,IAAMhB,EAAQ,IAAIsF,EAAW,IAAKa,GAElClF,aACE,SAAAnB,GAAK,OAAIA,EAAMsG,SAASF,YACxB,SAAAA,GACE,EAAKA,SAAWA,KAIpBjF,aACE,SAAAnB,GAAK,OAAIA,EAAMsG,SAASC,QACxB,SAAAA,GACE,IAAMC,EAASD,EAAKE,SAAQ,GAE5B,GAAID,GAAU,EAAG,CACf,IAAME,EAAaxG,EAAMyG,QAAQ,EAAKP,SAAWI,GACjD,EAAKhH,UAAUsB,OAAOC,MAAQ2F,EAC9B,EAAKP,QAAQrF,OAAOC,MAAQ,OAE5B,EAAKoF,QAAQrF,OAAOC,MAAQ,MCtCjB6F,E,kDAKnB,WACEtH,GAMC,IAAD,EALAQ,EAKA,uDAL2E,CACzE+G,MAAO,SAAA7G,GAAK,OAAIA,EAAM8G,mBAAmBD,OACzCE,OAAQ,SAAA/G,GAAK,OAAIA,EAAM8G,mBAAmBC,QAC1CC,QAAS,SAAAhH,GAAK,OAAIA,EAAM8G,mBAAmBE,UAE7C,qBACA,cAAM1H,EAAS,2BAZjBuH,WAWE,IAVFE,YAUE,IATFC,aASE,EAGA,IAAMH,EAAQ,EAAKpH,WAAWC,IAAI,SAC5BqH,EAAS,EAAKtH,WAAWC,IAAI,UAC7BsH,EAAU,EAAKvH,WAAWC,IAAI,WAEpC,QAAcC,IAAVkH,QAAkClH,IAAXoH,QAAoCpH,IAAZqH,EACjD,MAAM,IAAI7H,EARZ,OAWA,EAAK0H,MAAQA,EACb,EAAKE,OAASA,EACd,EAAKC,QAAUA,EAEf7F,YAAarB,EAAU+G,OAAO,SAAAA,GAC5B,EAAKA,MAAM9F,MAAQ8F,KAErB1F,YAAarB,EAAUiH,QAAQ,SAAAA,GAC7B,EAAKA,OAAOhG,MAAQgG,KAEtB5F,YAAarB,EAAUkH,SAAS,SAAAA,GAC9B,EAAKA,QAAQjG,MAAQiG,KAtBvB,E,sBAZyCpH,mBCAxBqH,E,kDAOnB,WACE3H,GAcC,IAAD,EAbAQ,EAaA,uDAPK,CACHoH,KAAM,SAAAlH,GAAK,OAAIA,EAAMmH,mBAAmBD,MACxCH,OAAQ,SAAA/G,GAAK,OAAIA,EAAMmH,mBAAmBJ,QAC1CK,MAAO,SAAApH,GAAK,OAAIA,EAAMmH,mBAAmBC,OACzCC,QAAS,SAAArH,GAAK,OAAIA,EAAMmH,mBAAmBE,SAC3CL,QAAS,SAAAhH,GAAK,OAAIA,EAAMmH,mBAAmBH,UAE7C,qBACA,cAAM1H,EAAS,6BAtBjB4H,UAqBE,IApBFH,YAoBE,IAnBFK,WAmBE,IAlBFC,aAkBE,IAjBFL,aAiBE,EAGA,IAAME,EAAO,EAAKzH,WAAWC,IAAI,QAC3BqH,EAAS,EAAKtH,WAAWC,IAAI,UAC7B0H,EAAQ,EAAK3H,WAAWC,IAAI,SAC5B2H,EAAU,EAAK5H,WAAWC,IAAI,WAC9BsH,EAAU,EAAKvH,WAAWC,IAAI,WAEpC,QACWC,IAATuH,QACWvH,IAAXoH,QACUpH,IAAVyH,QACYzH,IAAZ0H,QACY1H,IAAZqH,EAEA,MAAM,IAAI7H,EAhBZ,OAmBA,EAAK+H,KAAOA,EACZ,EAAKH,OAASA,EACd,EAAKK,MAAQA,EACb,EAAKC,QAAUA,EACf,EAAKL,QAAUA,EAEf7F,YAAarB,EAAUoH,MAAM,SAAAtD,GAC3B,EAAKsD,KAAKnG,MAAQ6C,KAEpBzC,YAAarB,EAAUiH,QAAQ,SAAAnD,GAC7B,EAAKmD,OAAOhG,MAAQ6C,KAEtBzC,YAAarB,EAAUsH,OAAO,SAAAxD,GAC5B,EAAKwD,MAAMrG,MAAQ6C,KAErBzC,YAAarB,EAAUuH,SAAS,SAAAhD,GAC9B,EAAKgD,QAAQtG,MAAQsD,KAEvBlD,YAAarB,EAAUkH,SAAS,SAAApD,GAC9B,EAAKoD,QAAQjG,MAAQ6C,KAtCvB,E,sBAtB2ChE,mBCazC0H,EAAI,uCAAG,wDAAAC,EAAA,6DACLjI,EAAU,IAAI+D,EADT,SAEL/D,EAAQkI,SAFH,UAGW,YAAlBlI,EAAQU,MAHD,sBAIH,IAAIZ,MAAM,sCAJP,uEAWHE,EAAQmI,aAAaC,UAAU,uBAX5B,QAeLpB,EAAW,IAAIJ,EAAa5G,GAC5BkE,EAAa,IAAID,EAAejE,GAChCqE,EAAa,IAAID,EAAepE,GAChCyE,EAAsB,IAAIkB,EAAwB3F,GAClDwH,EAAqB,IAAIF,EAAgBtH,GACzC6H,EAAqB,IAAIF,EAAkB3H,GAC3C0E,EAAqB,IAAIF,EAAuBxE,GAChDW,EAAO,IAAIJ,EAASP,GACpB6C,EAAO,IAAID,EAAS5C,GACpB0D,EAAW,IAAIF,EAAaxD,GAC5BkF,EAAW,IAAIF,EAAahF,GAC5B0F,EAAU,IAAID,EAAYzF,GAC1BuD,EAAS,IAAID,EAAWtD,IACxBqI,EAAMrI,EAAQmB,cAChBY,KAAKN,MAAQ,EAKjBuF,EAASH,QAAQlF,QAAQ6F,GACzBR,EAASH,QAAQlF,QAAQkG,GAGzBb,EAAS9G,UAAUyB,QAAQ0C,GAAY1C,QAAQuC,GAG/CA,EAAWvC,QAAQ+C,GAInBD,EAAoB9C,QAAQ+C,EAAmBD,qBAE/C+C,EAAmB7F,QAAQ+C,EAAmBC,mBAC9CD,EAAmB/C,QAAQhB,EAAKT,WAChCwE,EAAmB/C,QAAQkB,EAAK3C,WAGhCuE,EAAoB9C,QAAQuD,EAASD,OAAOR,qBAC5CA,EAAoB9C,QAAQ+D,EAAQT,OAAOR,qBAC3CoD,EAAmBlG,QAAQuD,EAASD,OAAON,mBAC3CkD,EAAmBlG,QAAQ+D,EAAQT,OAAON,mBAE1ChE,EAAKE,MAAMc,QAAQkB,EAAKE,MAExBpC,EAAKgB,QAAQ+B,EAASE,QACtBf,EAAKlB,QAAQ+B,EAASG,QAEtBgE,EAAmBlG,QAAQ0G,EAAItG,MAE/B2B,EACG/B,QAAQuD,GACRvD,QAAQ+D,GACR/D,QAAQ0G,GACR1G,QAAQ4B,GACR5B,QAAQ3B,EAAQsI,aArER,4CAAH,qDAwEKN","file":"static/js/4.f6691933.chunk.js","sourcesContent":["export { default as fiveLimit } from './references/five-limit'\nexport { default as equalTemper } from './references/equal-temper'\nexport { default as pythagorean } from './references/pythagorean'\n\nexport enum Key {\n  A = -3,\n  A_SHARP = -2,\n  B_FLAT = -2,\n  B = -1,\n  C = 0,\n  C_SHARP = 1,\n  D_FLAT = 1,\n  D = 2,\n  D_SHARP = 3,\n  E_FLAT = 3,\n  E = 4,\n  F = 5,\n  F_SHARP = 6,\n  G_FLAT = 6,\n  G = 7,\n  G_SHARP = 8,\n  A_FLAT = 8\n}\n\nexport class TwelveTone {\n  private baseOctave: number[]\n  private key: Key\n\n  constructor(fundamental: number, reference: number[], key = Key.A) {\n    this.key = key\n    this.baseOctave = reference.map(ratio => ratio * fundamental)\n  }\n\n  getNote(note: number) {\n    note -= this.key\n    const key = ((note % 12) + 12) % 12\n    const octave = Math.floor(note / 12)\n    return this.baseOctave[key] * Math.pow(2, octave - 6)\n  }\n}\n","import { RootState } from '../../state/types/state'\n\nexport type Selectors<T> = {\n  [P in keyof T]: (state: RootState) => T[P]\n}\n\nexport class ParamaterError extends Error {\n  constructor() {\n    super('Incorrect parameters on custom processor')\n  }\n}\n","import { ParamaterError } from './common'\n\nexport default class PulseOscillatorNode extends AudioWorkletNode {\n  pulseWidth: AudioParam\n  frequency: AudioParam\n\n  constructor(context: AudioContext) {\n    super(context, 'pulse-processor')\n\n    const pulseWidth = this.parameters.get('pulseWidth')\n    const frequency = this.parameters.get('frequency')\n\n    if (pulseWidth === undefined || frequency === undefined) {\n      throw new ParamaterError()\n    }\n\n    this.pulseWidth = pulseWidth\n    this.frequency = frequency\n  }\n}\n","import { observeStore } from '../../state/store'\nimport { Selectors } from './common'\nimport { VCO1WaveShape } from '../../state/types/state'\nimport PulseOscillatorNode from './PulseOscillatorNode'\n\nexport default class VCO1Node extends GainNode {\n  frequency: AudioParam\n  pulse: AudioNode\n\n  constructor(\n    context: AudioContext,\n    selectors: Selectors<{\n      waveShape: VCO1WaveShape\n      pulseWidth: number\n      scale: number\n    }> = {\n      waveShape: state => state.vco1.waveShape,\n      pulseWidth: state => state.vco1.pulseWidth,\n      scale: state => state.vco1.scale\n    }\n  ) {\n    super(context)\n\n    const triangle = context.createOscillator()\n    const saw = context.createOscillator()\n    const pulse = new PulseOscillatorNode(context)\n    const noise = new AudioWorkletNode(context, 'white-noise-processor')\n    const frequency = context.createConstantSource()\n    const scale = context.createGain()\n\n    const triangleLevel = context.createGain()\n    const sawLevel = context.createGain()\n    const pulseLevel = context.createGain()\n    const noiseLevel = context.createGain()\n\n    this.frequency = frequency.offset\n    this.pulse = pulse\n\n    frequency.offset.value = 0\n    triangle.type = 'triangle'\n    triangle.frequency.value = 0\n    saw.type = 'sawtooth'\n    saw.frequency.value = 0\n\n    frequency.connect(scale)\n\n    scale.connect(triangle.frequency)\n    scale.connect(saw.frequency)\n    scale.connect(pulse.frequency)\n\n    triangle.connect(triangleLevel).connect(this)\n    saw.connect(sawLevel).connect(this)\n    pulse.connect(pulseLevel).connect(this)\n    noise.connect(noiseLevel).connect(this)\n\n    triangle.start()\n    saw.start()\n    frequency.start()\n\n    observeStore(selectors.waveShape, shape => {\n      triangleLevel.gain.value = shape === VCO1WaveShape.TRIANGLE ? 1 : 0\n      sawLevel.gain.value = shape === VCO1WaveShape.SAWTOOTH ? 1 : 0\n      pulseLevel.gain.value = shape === VCO1WaveShape.SQUARE ? 1 : 0\n      noiseLevel.gain.value = shape === VCO1WaveShape.NOISE ? 1 : 0\n    })\n\n    observeStore(selectors.pulseWidth, pw => {\n      pulse.pulseWidth.value = pw\n    })\n\n    observeStore(selectors.scale, octave => {\n      scale.gain.value = Math.pow(2, octave)\n    })\n  }\n}\n","export default class RingOscillatorNode extends AudioWorkletNode {\n  constructor(context: AudioContext) {\n    super(context, 'xor-processor', { numberOfInputs: 2 })\n  }\n}\n","import { observeStore } from '../../state/store'\nimport { Selectors } from './common'\nimport { VCO2WaveShape } from '../../state/types/state'\nimport PulseOscillatorNode from './PulseOscillatorNode'\nimport RingOscillatorNode from './RingOscillatorNode'\n\nexport default class VCO2Node extends GainNode {\n  frequency: AudioParam\n  ring: AudioNode\n\n  constructor(\n    context: AudioContext,\n    selectors: Selectors<{\n      waveShape: VCO2WaveShape\n      pitch: number\n      scale: number\n    }> = {\n      waveShape: state => state.vco2.waveShape,\n      pitch: state => state.vco2.pitch,\n      scale: state => state.vco2.scale\n    }\n  ) {\n    super(context)\n\n    const saw = context.createOscillator()\n    const square = new PulseOscillatorNode(context)\n    const pulse = new PulseOscillatorNode(context)\n    const ring = new RingOscillatorNode(context)\n    const frequency = context.createConstantSource()\n    const pitch = context.createGain()\n    const scale = context.createGain()\n\n    const sawLevel = context.createGain()\n    const squareLevel = context.createGain()\n    const pulseLevel = context.createGain()\n    const ringLevel = context.createGain()\n\n    this.frequency = frequency.offset\n    this.ring = ring\n\n    frequency.offset.value = 0\n    saw.type = 'sawtooth'\n    saw.frequency.value = 0\n    square.pulseWidth.value = 0.5\n    square.frequency.value = 0\n    pulse.pulseWidth.value = 0.75\n    pulse.frequency.value = 0\n\n    frequency.connect(pitch).connect(scale)\n\n    scale.connect(saw.frequency)\n    scale.connect(square.frequency)\n    scale.connect(pulse.frequency)\n\n    square.connect(ring, 0, 1)\n\n    saw.connect(sawLevel).connect(this)\n    square.connect(squareLevel).connect(this)\n    pulse.connect(pulseLevel).connect(this)\n    ring.connect(ringLevel).connect(this)\n\n    saw.start()\n    frequency.start()\n\n    observeStore(selectors.waveShape, shape => {\n      sawLevel.gain.value = shape === VCO2WaveShape.SAWTOOTH ? 1 : 0\n      squareLevel.gain.value = shape === VCO2WaveShape.SQUARE ? 1 : 0\n      pulseLevel.gain.value = shape === VCO2WaveShape.PULSE ? 1 : 0\n      ringLevel.gain.value = shape === VCO2WaveShape.RING ? 1 : 0\n    })\n    observeStore(selectors.pitch, value => {\n      pitch.gain.value = Math.pow(2, value)\n    })\n    observeStore(selectors.scale, octave => {\n      scale.gain.value = Math.pow(2, octave)\n    })\n  }\n}\n","import { observeStore } from '../../state/store'\nimport { Selectors } from './common'\n\nexport default class VolumeNode extends GainNode {\n  constructor(\n    context: AudioContext,\n    selectors: Selectors<{ volume: number }> = {\n      volume: state => state.volume\n    }\n  ) {\n    super(context)\n\n    observeStore(selectors.volume, volume => {\n      this.gain.value = volume\n    })\n  }\n}\n","import { Selectors } from './common'\nimport VolumeNode from './VolumeNode'\n\nexport default class VCOMixerNode extends GainNode {\n  vco1in: GainNode\n  vco2in: GainNode\n\n  constructor(\n    context: AudioContext,\n    selectors: Selectors<{ vco1Level: number; vco2Level: number }> = {\n      vco1Level: state => state.vcoMixer.vco1Level,\n      vco2Level: state => state.vcoMixer.vco2Level\n    }\n  ) {\n    super(context)\n    this.vco1in = new VolumeNode(context, { volume: selectors.vco1Level })\n    this.vco2in = new VolumeNode(context, { volume: selectors.vco2Level })\n\n    this.vco1in.connect(this)\n    this.vco2in.connect(this)\n  }\n}\n","export default window.AudioContext || window.webkitAudioContext\n","import { observeStore } from '../../state/store'\nimport { Selectors } from './common'\n\n/**\n * This node adds an offset to the incoming control frequency.\n */\nexport default class MasterTuneNode extends GainNode {\n  constructor(\n    context: AudioContext,\n    selectors: Selectors<{ masterTune: number }> = {\n      masterTune: state => state.masterTune\n    }\n  ) {\n    super(context)\n\n    observeStore(selectors.masterTune, tune => {\n      this.gain.value = Math.pow(2, tune)\n    })\n  }\n}\n","import { observeStore } from '../../state/store'\nimport { Selectors, ParamaterError } from './common'\n\n/**\n * This node adds a lowpass filter on the control frequency, effectively adding\n * a ramp/ slide effect when the notes change.\n */\nexport default class PortamentoNode extends AudioWorkletNode {\n  time: AudioParam\n\n  constructor(\n    context: AudioContext,\n    selectors: Selectors<{ portamento: number }> = {\n      portamento: state => state.portamento\n    }\n  ) {\n    super(context, 'portamento-processor')\n\n    const time = this.parameters.get('time')\n\n    if (time === undefined) {\n      throw new ParamaterError()\n    }\n\n    this.time = time\n\n    observeStore(selectors.portamento, portamento => {\n      portamento *= 0.8\n      portamento += 0.1\n      const slope = 5000\n      this.time.value = 1 - (Math.pow(slope + 1, 1 - portamento) - 1) / slope\n    })\n  }\n}\n","import { observeStore } from '../../state/store'\nimport { Selectors } from './common'\n\nexport default class FrequencyModulatorNode extends GainNode {\n  modulationGenerator: GainNode\n  envelopeGenerator: GainNode\n\n  constructor(\n    context: AudioContext,\n    selectors: Selectors<{\n      modulationGenerator: number\n      envelopeGenerator: number\n    }> = {\n      modulationGenerator: state =>\n        state.frequencyModulator.modulationGenerator,\n      envelopeGenerator: state => state.frequencyModulator.envelopeGenerator\n    }\n  ) {\n    super(context)\n    this.gain.value = 0\n\n    // the envelope in will be in the range 0 to 1, we want to change it so that\n    // it is in the range 0 to level where level is the setting for EG.\n    this.envelopeGenerator = context.createGain()\n    // the modulation generator will be in the range -1 to 1\n    this.modulationGenerator = context.createGain()\n\n    // we then want to offset the incoming values\n    const egOffset = context.createConstantSource()\n    const mgOffset = context.createConstantSource()\n    mgOffset.offset.value = 1\n    egOffset.start()\n    mgOffset.start()\n\n    // we then want to multiply the values together and apply that to the\n    // incoming signal\n    const multiplier = context.createGain()\n    multiplier.gain.value = 0\n\n    this.modulationGenerator.connect(multiplier)\n    mgOffset.connect(multiplier)\n\n    this.envelopeGenerator.connect(multiplier.gain)\n    egOffset.connect(multiplier.gain)\n\n    multiplier.connect(this.gain)\n\n    observeStore(selectors.modulationGenerator, level => {\n      this.modulationGenerator.gain.value = level\n    })\n\n    observeStore(selectors.envelopeGenerator, level => {\n      this.envelopeGenerator.gain.value = level\n      egOffset.offset.value = 1 - level\n    })\n  }\n}\n","import { observeStore } from '../../state/store'\nimport FrequencyModulatorNode from './FrequencyModulatorNode'\nimport { Selectors } from './common'\n\nexport default class HighpassNode extends BiquadFilterNode {\n  cutoff: FrequencyModulatorNode\n\n  constructor(\n    context: AudioContext,\n    selectors: Selectors<{\n      cutoff: number\n      peak: number\n      modulationGenerator: number\n      envelopeGenerator: number\n    }> = {\n      cutoff: state => state.highpass.cutoff,\n      peak: state => state.highpass.peak,\n      modulationGenerator: state =>\n        state.highpass.modulator.modulationGenerator,\n      envelopeGenerator: state => state.highpass.modulator.envelopeGenerator\n    }\n  ) {\n    super(context)\n\n    this.type = 'highpass'\n    this.frequency.value = 0\n\n    this.cutoff = new FrequencyModulatorNode(context, {\n      modulationGenerator: selectors.modulationGenerator,\n      envelopeGenerator: selectors.envelopeGenerator\n    })\n\n    const frequencyIn = context.createConstantSource()\n    frequencyIn.start()\n\n    frequencyIn.connect(this.cutoff).connect(this.frequency)\n\n    observeStore(selectors.cutoff, cutoff => {\n      const level = 1 - (1 - cutoff) * (1 - cutoff)\n      const min = 100\n      const max = 15000\n\n      // a logarithmic curve\n      frequencyIn.offset.value = Math.pow(max - min + 1, level) + min - 1\n    })\n\n    observeStore(selectors.peak, peak => {\n      const min = 0\n      const max = 40\n\n      this.Q.value = Math.pow(max - min + 1, peak) + min - 1\n    })\n  }\n}\n","import { observeStore } from '../../state/store'\nimport FrequencyModulatorNode from './FrequencyModulatorNode'\nimport { Selectors } from './common'\n\nexport default class LowpassNode extends BiquadFilterNode {\n  cutoff: FrequencyModulatorNode\n\n  constructor(\n    context: AudioContext,\n    selectors: Selectors<{\n      cutoff: number\n      peak: number\n      modulationGenerator: number\n      envelopeGenerator: number\n    }> = {\n      cutoff: state => state.lowpass.cutoff,\n      peak: state => state.lowpass.peak,\n      modulationGenerator: state => state.lowpass.modulator.modulationGenerator,\n      envelopeGenerator: state => state.lowpass.modulator.envelopeGenerator\n    }\n  ) {\n    super(context)\n\n    this.type = 'lowpass'\n    this.frequency.value = 0\n\n    this.cutoff = new FrequencyModulatorNode(context, {\n      modulationGenerator: selectors.modulationGenerator,\n      envelopeGenerator: selectors.envelopeGenerator\n    })\n\n    const frequencyIn = context.createConstantSource()\n    frequencyIn.start()\n    frequencyIn.connect(this.cutoff).connect(this.frequency)\n\n    observeStore(selectors.cutoff, cutoff => {\n      const level = 1 - (1 - cutoff) * (1 - cutoff)\n      const min = 100\n      const max = 15000\n\n      // a logarithmic curve\n      frequencyIn.offset.value = Math.pow(max - min + 1, level) + min - 1\n    })\n\n    observeStore(selectors.peak, peak => {\n      const min = 0\n      const max = 40\n\n      this.Q.value = Math.pow(max - min + 1, peak) + min - 1\n    })\n  }\n}\n","import { observeStore } from '../../state/store'\nimport { Selectors, ParamaterError } from './common'\n\nexport default class ModulationGeneratorNode extends AudioWorkletNode {\n  waveForm: AudioParam\n  frequency: AudioParam\n\n  constructor(\n    context: AudioContext,\n    selectors: Selectors<{ waveForm: number; frequency: number }> = {\n      waveForm: state => state.modulationGenerator.waveForm,\n      frequency: state => state.modulationGenerator.frequency\n    }\n  ) {\n    super(context, 'modulation-generator-processor', { numberOfOutputs: 2 })\n\n    const waveForm = this.parameters.get('waveForm')\n    const frequency = this.parameters.get('frequency')\n\n    if (waveForm === undefined || frequency === undefined) {\n      throw new ParamaterError()\n    }\n\n    this.waveForm = waveForm\n    this.frequency = frequency\n\n    observeStore(selectors.waveForm, waveForm => {\n      this.waveForm.value = waveForm\n    })\n\n    observeStore(selectors.frequency, frequency => {\n      this.frequency.value = frequency\n    })\n  }\n}\n","export default [...Array(12)].map((_, i) => Math.pow(2, i / 12))\n","import { TwelveTone, Key, fiveLimit } from '../../tuning'\nimport equalTemper from '../../tuning/references/equal-temper'\nimport { observeStore } from '../../state/store'\n\nexport default class KeyboardNode {\n  /** The control frequency of the keyboard */\n  frequency: ConstantSourceNode\n  /** The trigger out of the keyboard: 1 when key is pressed and 0 otherwise. */\n  trigger: ConstantSourceNode\n  /** The lowest note the keyboard will play */\n  bassNote: number\n\n  constructor(context: AudioContext) {\n    this.frequency = context.createConstantSource()\n    this.trigger = context.createConstantSource()\n    this.bassNote = 0\n\n    this.frequency.start()\n    this.trigger.start()\n\n    // // this scale is just tunung in the key of C\n    // const scale = new TwelveTone(450, fiveLimit, Key.C)\n    const scale = new TwelveTone(440, equalTemper)\n\n    observeStore(\n      state => state.keyboard.bassNote,\n      bassNote => {\n        this.bassNote = bassNote\n      }\n    )\n\n    observeStore(\n      state => state.keyboard.keys,\n      keys => {\n        const target = keys.indexOf(true)\n\n        if (target >= 0) {\n          const targetFreq = scale.getNote(this.bassNote + target)\n          this.frequency.offset.value = targetFreq\n          this.trigger.offset.value = 1\n        } else {\n          this.trigger.offset.value = 0\n        }\n      }\n    )\n  }\n}\n","import { observeStore } from '../../state/store'\nimport { Selectors, ParamaterError } from './common'\n\nexport default class DAREnvelopeNode extends AudioWorkletNode {\n  delay: AudioParam\n  attack: AudioParam\n  release: AudioParam\n\n  constructor(\n    context: AudioContext,\n    selectors: Selectors<{ delay: number; attack: number; release: number }> = {\n      delay: state => state.envelopeGenerator1.delay,\n      attack: state => state.envelopeGenerator1.attack,\n      release: state => state.envelopeGenerator1.release\n    }\n  ) {\n    super(context, 'dar-envelope-processor')\n\n    const delay = this.parameters.get('delay')\n    const attack = this.parameters.get('attack')\n    const release = this.parameters.get('release')\n\n    if (delay === undefined || attack === undefined || release === undefined) {\n      throw new ParamaterError()\n    }\n\n    this.delay = delay\n    this.attack = attack\n    this.release = release\n\n    observeStore(selectors.delay, delay => {\n      this.delay.value = delay\n    })\n    observeStore(selectors.attack, attack => {\n      this.attack.value = attack\n    })\n    observeStore(selectors.release, release => {\n      this.release.value = release\n    })\n  }\n}\n","import { observeStore } from '../../state/store'\nimport { Selectors, ParamaterError } from './common'\n\nexport default class HADSREnvelopeNode extends AudioWorkletNode {\n  hold: AudioParam\n  attack: AudioParam\n  decay: AudioParam\n  sustain: AudioParam\n  release: AudioParam\n\n  constructor(\n    context: AudioContext,\n    selectors: Selectors<{\n      hold: number\n      attack: number\n      decay: number\n      sustain: number\n      release: number\n    }> = {\n      hold: state => state.envelopeGenerator2.hold,\n      attack: state => state.envelopeGenerator2.attack,\n      decay: state => state.envelopeGenerator2.decay,\n      sustain: state => state.envelopeGenerator2.sustain,\n      release: state => state.envelopeGenerator2.release\n    }\n  ) {\n    super(context, 'hadsr-envelope-processor')\n\n    const hold = this.parameters.get('hold')\n    const attack = this.parameters.get('attack')\n    const decay = this.parameters.get('decay')\n    const sustain = this.parameters.get('sustain')\n    const release = this.parameters.get('release')\n\n    if (\n      hold === undefined ||\n      attack === undefined ||\n      decay === undefined ||\n      sustain === undefined ||\n      release === undefined\n    ) {\n      throw new ParamaterError()\n    }\n\n    this.hold = hold\n    this.attack = attack\n    this.decay = decay\n    this.sustain = sustain\n    this.release = release\n\n    observeStore(selectors.hold, time => {\n      this.hold.value = time\n    })\n    observeStore(selectors.attack, time => {\n      this.attack.value = time\n    })\n    observeStore(selectors.decay, time => {\n      this.decay.value = time\n    })\n    observeStore(selectors.sustain, level => {\n      this.sustain.value = level\n    })\n    observeStore(selectors.release, time => {\n      this.release.value = time\n    })\n  }\n}\n","import VCO1Node from './custom-nodes/VCO1Node'\nimport VCO2Node from './custom-nodes/VCO2Node'\nimport VCOMixerNode from './custom-nodes/VCOMixerNode'\nimport VolumeNode from './custom-nodes/VolumeNode'\nimport AudioContext from './audioContext'\nimport MasterTuneNode from './custom-nodes/MasterTuneNode'\nimport PortamentoNode from './custom-nodes/PortamentoNode'\nimport HighpassNode from './custom-nodes/HighpassNode'\nimport LowpassNode from './custom-nodes/LowpassNode'\nimport ModulationGeneratorNode from './custom-nodes/ModulationGeneratorNode'\nimport FrequencyModulatorNode from './custom-nodes/FrequencyModulatorNode'\nimport KeyboardNode from './custom-nodes/KeyboardNode'\nimport DAREnvelopeNode from './custom-nodes/DAREnvelopeNode'\nimport HADSREnvelopeNode from './custom-nodes/HADSREnvelopeNode'\n\n// loads the external worklet processors and sets up the default patch.\nconst init = async () => {\n  const context = new AudioContext()\n  await context.resume()\n  if (context.state !== 'running') {\n    throw new Error('The audio context failed to start.')\n  }\n\n  // the site is not hosted at the root\n  if (process.env.NODE_ENV === 'development') {\n    await context.audioWorklet.addModule('web-synth/audio-processors.js')\n  } else {\n    await context.audioWorklet.addModule('audio-processors.js')\n  }\n\n  // instantiate each of the modules\n  const keyboard = new KeyboardNode(context)\n  const masterTune = new MasterTuneNode(context)\n  const portamento = new PortamentoNode(context)\n  const modulationGenerator = new ModulationGeneratorNode(context)\n  const envelopeGenerator1 = new DAREnvelopeNode(context)\n  const envelopeGenerator2 = new HADSREnvelopeNode(context)\n  const frequencyModulator = new FrequencyModulatorNode(context)\n  const vco1 = new VCO1Node(context)\n  const vco2 = new VCO2Node(context)\n  const vcoMixer = new VCOMixerNode(context)\n  const highpass = new HighpassNode(context)\n  const lowpass = new LowpassNode(context)\n  const volume = new VolumeNode(context)\n  const vca = context.createGain()\n  vca.gain.value = 0\n\n  // initialise the default patch\n\n  // the keyboard triggers both envelopes\n  keyboard.trigger.connect(envelopeGenerator1)\n  keyboard.trigger.connect(envelopeGenerator2)\n\n  // the keyboard frequency gets tuned and ported.\n  keyboard.frequency.connect(portamento).connect(masterTune)\n\n  // the frequency then gets modulated\n  masterTune.connect(frequencyModulator)\n\n  // there are two sources for modulation:\n  // the modulation generator (a low frequency oscillator); and,\n  modulationGenerator.connect(frequencyModulator.modulationGenerator)\n  // the first envelope generator.\n  envelopeGenerator1.connect(frequencyModulator.envelopeGenerator)\n  frequencyModulator.connect(vco1.frequency)\n  frequencyModulator.connect(vco2.frequency)\n\n  // the cutoff for both filters is also frequency modulated.\n  modulationGenerator.connect(highpass.cutoff.modulationGenerator)\n  modulationGenerator.connect(lowpass.cutoff.modulationGenerator)\n  envelopeGenerator2.connect(highpass.cutoff.envelopeGenerator)\n  envelopeGenerator2.connect(lowpass.cutoff.envelopeGenerator)\n\n  vco1.pulse.connect(vco2.ring)\n\n  vco1.connect(vcoMixer.vco1in)\n  vco2.connect(vcoMixer.vco2in)\n\n  envelopeGenerator2.connect(vca.gain)\n\n  vcoMixer\n    .connect(highpass)\n    .connect(lowpass)\n    .connect(vca)\n    .connect(volume)\n    .connect(context.destination)\n}\n\nexport default init\n"],"sourceRoot":""}